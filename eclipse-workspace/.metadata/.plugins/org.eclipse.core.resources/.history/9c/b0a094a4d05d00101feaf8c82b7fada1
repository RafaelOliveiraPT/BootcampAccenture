package pt.upacademy.projeto1;

import java.util.ArrayList;
import java.util.Scanner;

public class App {
	private int productID = 0;
	private int shelfID = 0;
	private ArrayList<Produto> productsList = new ArrayList<Produto>();
	private ArrayList<Prateleira> shelvesList = new ArrayList<Prateleira>();
	private Scanner reader = new Scanner(System.in);

	public static void main(String[] args) {
		beginApp();
	}

	public static void beginApp() {
		App myApplication = new App();

		// dados para teste
		Produto a = new Produto(myApplication.productID);
		myApplication.productID++;
		a.setDiscount(2);
		a.setIva(23);
		a.setPvp(22);
		a.setName("Sapato");
		myApplication.productsList.add(a);

		Prateleira p1 = new Prateleira(myApplication.shelfID);
		myApplication.shelfID++;
		p1.setCapacity(0);
		p1.setDiariaAluguer(.20);
		myApplication.shelvesList.add(p1);
		a.addPrateleira(p1);

		myApplication.showMenu();

	}

	private void showMenu() {
		String menu = "Por favor selecione uma das seguintes opções:\n" + "1) Listar produtos\n"
				+ "2) Listar prateleiras\n" + "3) Sair";

		boolean showMenuOption = true;
		Scanner reader = new Scanner(System.in);
		int choosedOptionByUser = -1;

		do {
			System.out.println(menu);
			choosedOptionByUser = Util.getIntFromKeyboard();
			if (choosedOptionByUser >= 1 && choosedOptionByUser <= 3) {
				switch (choosedOptionByUser) {
				case 1:
					showProductMenu();
					break;
				case 2:
					showShelfMenu();
					break;
				case 3:
					showMenuOption = false;
					System.out.println("A aplicação de stocks terminou.");
					break;
				default:
					break;
				}
			}

		} while (showMenuOption);
		reader.close();
	}

	private void showShelfMenu() {
		String menuShelf = "Por favor selecione uma das seguintes opções:\n" + "1) Criar nova prateleira\n"
				+ "2) Editar uma prateleira existente\n" + "3) Consultar o detalhe de uma prateleira\n"
				+ "4) Remover uma prateleira\n" + "5) Voltar ao ecrã anterior";

		boolean showMenuOption = true;

		int choosedOptionByUser = -1;

		do {
			// System.out.println("-------------------------------------------------------------------------");
			// showProducts();
			// System.out.println("-------------------------------------------------------------------------");
			System.out.println(menuShelf);

			choosedOptionByUser = Util.getIntFromKeyboard();

			if (choosedOptionByUser >= 1 && choosedOptionByUser <= 5) {
				switch (choosedOptionByUser) {
				case 1:
					// criar nova prateleira
					createShelf();
					break;
				case 2:
					// editar um produto existente
					editShelf();
					break;
				case 3:
					// consultar o detalhe de um produto
					// consultShelfDetails();
					break;
				case 4:
					// remover um produto
					// removeShelf();
					break;
				case 5:
					// voltar ao ecra anterior
					showMenuOption = false;
					break;
				default:
					break;
				}
			}

		} while (showMenuOption);
	}

	private void createShelf() {
		Prateleira newShelf = new Prateleira(shelfID++);
		int auxInt;
		double auxDouble;

		if (productsList.size() != 0) {
			System.out.println("Introduza 1 se a prateleira tiver disponível, 0 se a prateleira estiver ocupada");

			// obter o valor para o atributo capacity
			while (true) {
				auxInt = Util.getIntFromKeyboard();
				if (auxInt != 0 && auxInt != 1) {
					System.out.print("Valor inválido, introduza um novo valor:");
				} else {
					newShelf.setCapacity(auxInt);
					break;
				}
			}

			// obter o id para produto
			if (newShelf.getCapacity() == 0) {
				Produto auxProduct;
				System.out.print("Insira o ID do produto:");

				while (true) {
					auxInt = Util.getIntFromKeyboard();
					if (auxInt >= 0) {
						auxProduct = getProduct(auxInt);
						if (auxProduct != null) {
							newShelf.setProduto(auxProduct);
							System.out.println("teste");
							break;
						} else {
							System.out.println("Não existe nenhum produto com esse ID");
						}
					} else {
						System.out.println("O ID tem que ser um número positivo.");
					}
				}
			}
		}

		// obter o valor para o atributo diariaAluguer
		while (true) {
			System.out.print("Introduza um preço para a diária do aluguer:");
			auxDouble = Util.getDoubleFromKeyboard();
			if (auxDouble < 0) {
				System.out.print("Preço inválido, introduza um novo preço:");
			} else {
				newShelf.setDiariaAluguer(auxDouble);
				break;
			}

		}

		shelvesList.add(newShelf);
	}

	private void editShelf() {
		int auxInt;
		Prateleira auxPrateleira;

		System.out.print("Insira o ID do prateleira:");
		auxInt = Util.getIntFromKeyboard();
		if (auxInt >= 0) {
			auxPrateleira = getShelf(auxInt);
			if (auxPrateleira != null) {
				editShelftHelper(auxPrateleira);
			} else {
				System.out.println("Não existe nenhum produto com esse ID");
			}
		} else {
			System.out.println("O ID tem que ser um número positivo.");
		}
	}

	//editar prateleira
	private void editShelftHelper(Prateleira shelf) {
		int auxInt;
		double auxDouble;
		String auxStr;
		Produto auxProduct;
		
		//se não houver produtos não vale a pena pedir o capacity e o produto
		if (productsList.size() != 0) {
			System.out.print("valor atual capacity=" + shelf.getCapacity() + " ");
			System.out.print("introduza um novo valor:");

			// obter o valor para o atributo capacity
			while (true) {
				auxStr = reader.nextLine();
				if(auxStr.length() == 0) {
					break;					
				}
				try {
					auxInt = Integer.parseInt(auxStr);
					if (auxInt != 0 && auxInt != 1) {
						System.out.print("Valor inválido, introduza um novo valor:");
					} else {
						if(shelf.getCapacity() == 0)
							shelf.setProduto(null);
						shelf.setCapacity(auxInt);
						break;
					}
				} catch (Exception e) {
					System.out.println("Introduza um número válido:");
				}
			}
			//escolher o produto caso capacity da prateleira esteja ocupada capacity = 0
			if(shelf.getCapacity() == 0) {
				//mostra o produto que esta a ocupar a prateleira
				System.out.println("Prateleira ocupada com o produto=" + shelf.getProduto());
				System.out.print("Insira o numero do produto:");
				while(true) {
					auxStr = reader.nextLine();
					try {
						auxInt = Integer.parseInt(auxStr);
						auxProduct = getProduct(auxInt);
						if(auxProduct != null) {
							shelf.setProduto(auxProduct);
							break;
						}else {
							System.out.print("O ID não está associado a nenhum produto, introduza um novo ID:");
						}
					} catch (Exception e) {
						System.out.print("Valor inválido, introduza um ID válido:");
					}
				}
			}
		}else {
			System.out.println("capacity=" + shelf.getCapacity());
		}
		System.out.print("valor atual diariaAluguer=" + shelf.getDiariaAluguer());
		System.out.print(" introduza um novo preço:");

		// obter o valor para o atributo diaria de aluguer
		while (true) {
			auxStr = reader.nextLine();
			if(auxStr.length() == 0) {
				break;					
			}
			try {
				auxDouble = Double.parseDouble(auxStr);
				if (auxDouble < 0) {
					System.out.print("Preço inválido, introduza um novo preço:");
				} else {
					shelf.setDiariaAluguer(auxDouble);
					break;
				}
			} catch (Exception e) {
				System.out.println("Introduza um preço válido:");
			}
		}
	}

	private void showProductMenu() {
		String menuProduct = "Por favor selecione uma das seguintes opções:\n" + "1) Criar novo produto\n"
				+ "2) Editar um produto existente\n" + "3) Consultar o detalhe de um produto\n"
				+ "4) Remover um produto\n" + "5) Voltar ao ecrã anterior";

		boolean showMenuOption = true;

		int choosedOptionByUser = -1;

		do {
			System.out.println("-------------------------------------------------------------------------");
			showProducts();
			System.out.println("-------------------------------------------------------------------------");
			System.out.println(menuProduct);

			choosedOptionByUser = Util.getIntFromKeyboard();

			if (choosedOptionByUser >= 1 && choosedOptionByUser <= 5) {
				switch (choosedOptionByUser) {
				case 1:
					// criar novo produto
					createProduct();
					break;
				case 2:
					// editar um produto existente
					editProduct();
					break;
				case 3:
					// consultar o detalhe de um produto
					consultProductDetails();
					break;
				case 4:
					// remover um produto
					removeProduct();
					break;
				case 5:
					// voltar ao ecra anterior
					showMenuOption = false;
					break;
				default:
					break;
				}
			}

		} while (showMenuOption);
	}

	private void createProduct() {
		Produto newProduct = new Produto(productID++);
		int auxInt;
		double auxDouble;

		System.out.println("Insira o nome do produto:");
		newProduct.setName(Util.getLineFromKeyboard());

		// vai ser pedido ao utilizador uma prateleira de cada vez até inserir o valor
		// -1
		while (true) {
			if (shelvesList.size() == 0) {
				System.out.println("Não existem prateleiras criadas, vamos para o próximo atributo\n");
				break;
			}
			System.out.print("Insira o numero da prateleira em que o produto está colocado. (-1 p/ terminar!)");
			auxInt = Util.getIntFromKeyboard();
			if (auxInt == -1) {
				break;
			}
			for (int i = 0; i < shelvesList.size(); i++) {
				if (shelvesList.get(i).getID() == auxInt && shelvesList.get(i).getCapacity() == 0) {
					shelvesList.get(i).setCapacity(0);
					shelvesList.get(i).setProduto(newProduct);
					newProduct.addPrateleira(shelvesList.get(i));
				} else if (shelvesList.get(i).getID() == auxInt && shelvesList.get(i).getCapacity() == 0) {
					System.out.println("A prateleira que introduziu já está ocupada!");
				} else if (i == shelvesList.size() - 1) {
					System.out.println("A prateleira que introduziu não é válida!");
				}
			}
		}

		while (true) {
			System.out.print("Insira o valor de desconto do produto:");
			auxDouble = Util.getDoubleFromKeyboard();
			if (auxDouble >= 0) {
				newProduct.setDiscount(auxDouble);
				break;
			} else {
				System.out.println("O desconto tem que ser um número positivo.");
			}
		}
		while (true) {
			System.out.print("Insira o valor do iva do produto:");
			auxDouble = Util.getDoubleFromKeyboard();
			if (auxDouble >= 0) {
				newProduct.setIva(auxDouble);
				break;
			} else {
				System.out.println("O iva tem que ser um número positivo.");
			}
		}

		while (true) {
			System.out.print("Insira o valor do PVP do produto:");
			auxDouble = Util.getDoubleFromKeyboard();
			if (auxDouble >= 0) {
				newProduct.setPvp(auxDouble);
				break;
			} else {
				System.out.println("O PVP tem que ser um número positivo.");
			}
		}
		productsList.add(newProduct);
	}

	private void editProduct() {
		int auxInt;
		Produto auxProduct;

		System.out.print("Insira o ID do produto:");
		auxInt = Util.getIntFromKeyboard();
		if (auxInt >= 0) {
			auxProduct = getProduct(auxInt);
			if (auxProduct != null) {
				editProductHelper(auxProduct);
			} else {
				System.out.println("Não existe nenhum produto com esse ID");
			}
		} else {
			System.out.println("O ID tem que ser um número positivo.");
		}
	}

	private void editProductHelper(Produto product) {
		String auxStr;
		Double auxDouble = 0.0;
		int auxInt;

		// change product name
		System.out.print("Nome de produto atual: " + product.getName() + " modificar:");
		auxStr = reader.nextLine();
		if (!auxStr.isEmpty()) {
			product.setName(auxStr);
			System.out.println("diz que a string tem conteudo");
		}

		// change discount
		System.out.print("Desconto do produto atual: " + product.getDiscount() + " modificar:");
		while (true) {
			auxStr = reader.nextLine();
			if (!auxStr.isEmpty()) {
				try {
					auxDouble = Double.parseDouble(auxStr);
					product.setDiscount(auxDouble);
					break;
				} catch (Exception e) {
					System.out.print("O valor introduzido não é válido!\nIntroduza o valor de desconto:");
				}
			} else {
				break;
			}
		}

		// change iva
		System.out.print("IVA do produto atual: " + product.getIva() + " modificar:");
		while (true) {
			auxStr = reader.nextLine();
			if (!auxStr.isEmpty()) {
				try {
					auxDouble = Double.parseDouble(auxStr);
					product.setIva(auxDouble);
					break;
				} catch (Exception e) {
					System.out.print("O valor introduzido não é válido!\nIntroduza o valor do IVA:");
				}
			} else {
				break;
			}
		}

		System.out.print("PVP do produto atual: " + product.getPvp() + " modificar:");
		while (true) {
			auxStr = reader.nextLine();
			if (!auxStr.isEmpty()) {
				try {
					auxDouble = Double.parseDouble(auxStr);
					product.setPvp(auxDouble);
					break;
				} catch (Exception e) {
					System.out.print("O valor introduzido não é válido!\nIntroduza o valor do PVP:");
				}
			} else {
				break;
			}
		}

		// change shelves
		showShelvesFromProduct(product);
		product.clearShelves();
		// vai ser pedido ao utilizador uma prateleira de cada vez até inserir o valor
		// -1
		while (true) {
			if (shelvesList.size() == 0) {
				System.out.println("Não existem prateleiras criadas, vamos para o próximo atributo\n");
				break;
			}
			System.out.print("Insira o numero da prateleira em que o produto está colocado. (-1 p/ terminar!)");
			auxInt = Util.getIntFromKeyboard();
			if (auxInt == -1) {
				break;
			}
			for (int i = 0; i < shelvesList.size(); i++) {
				if (shelvesList.get(i).getID() == auxInt && shelvesList.get(i).getCapacity() == 0) {
					shelvesList.get(i).setCapacity(0);
					shelvesList.get(i).setProduto(product);
					product.addPrateleira(shelvesList.get(i));
				} else if (shelvesList.get(i).getID() == auxInt && shelvesList.get(i).getCapacity() == 0) {
					System.out.println("A prateleira que introduziu já está ocupada!");
				} else if (i == shelvesList.size() - 1) {
					System.out.println("A prateleira que introduziu não é válida!");
				}
			}
		}
		System.out.println("-------------------------------------------------------------------------");
		product.showProduct();
		System.out.println("-------------------------------------------------------------------------");
	}

	private void consultProductDetails() {
		int auxInt;
		Produto auxProduct;

		System.out.print("Insira o ID do produto:");
		auxInt = Util.getIntFromKeyboard();
		if (auxInt >= 0) {
			auxProduct = getProduct(auxInt);
			if (auxProduct != null) {
				System.out.println("-------------------------------------------------------------------------");
				auxProduct.showProduct();
				System.out.println("-------------------------------------------------------------------------");
			} else {
				System.out.println("Não existe nenhum produto com esse ID");
			}
		} else {
			System.out.println("O ID tem que ser um número positivo.");
		}
	}

	private void removeProduct() {
		int auxInt;
		Produto auxProduct;

		System.out.print("Insira o ID do produto:");
		auxInt = Util.getIntFromKeyboard();
		if (auxInt >= 0) {
			auxProduct = getProduct(auxInt);
			if (auxProduct != null) {
				removeProductHelper(auxProduct);

			} else {
				System.out.println("Não existe nenhum produto com esse ID");
			}
		} else {
			System.out.println("O ID tem que ser um número positivo.");
		}

	}

	private void removeProductHelper(Produto product) {
		product.remove();
		productsList.remove(product);
		System.out.println("Produto removido com sucesso!");
	}

	private void showShelvesFromProduct(Produto product) {
		System.out.println("-----------------------------------");
		System.out.println("O produto: " + product.getName() + " está nas seguintes prateleiras:");
		for (Prateleira shelf : product.getPrateleiras()) {
			System.out.println(shelf.getID());
		}
		System.out.println("-----------------------------------");

	}

	private void showProducts() {
		for (Produto product : productsList) {
			product.showProduct();
		}
	}
	
	private void showShelves() {
		for (Prateleira shelf : shelvesList) { 
			shelf.showShelf();
		}
	}

	private Produto getProduct(int ID) {
		for (Produto product : productsList) {
			if (product.getID() == ID)
				return product;
		}
		return null;
	}

	private Prateleira getShelf(int ID) {
		for (Prateleira shelf : shelvesList) {
			if (shelf.getID() == ID) {
				return shelf;
			}
		}
		return null;
	}
}
